[
      {
        "number": 1,
        "question": "What is Object-Oriented Programming (OOP)?",
        "answer": "OOP is a programming paradigm that uses objects, which are instances of classes, to design and organize code."
      },
      {
        "number": 2,
        "question": "What is a class in C++?",
        "answer": "A class is a user-defined data type that serves as a blueprint for creating objects. It encapsulates data and methods that operate on the data."
      },
      {
        "number": 3,
        "question": "Explain the concept of encapsulation.",
        "answer": "Encapsulation is the bundling of data and methods that operate on the data within a single unit, i.e., a class. It restricts access to some of an object's components and prevents the accidental modification of data."
      },
      {
        "number": 4,
        "question": "What is inheritance in C++?",
        "answer": "Inheritance is a mechanism in which a new class inherits properties and behaviors from an existing class. The new class is called the derived class, and the existing class is the base class."
      },
      {
        "number": 5,
        "question": "How is polymorphism achieved in C++?",
        "answer": "Polymorphism is achieved in C++ through function overloading and virtual functions. Function overloading allows multiple functions with the same name but different parameters, while virtual functions enable dynamic method binding."
      },
      {
        "number": 6,
        "question": "What is a constructor?",
        "answer": "A constructor is a special member function in a class that is automatically called when an object is created. It is used to initialize the object's data members."
      },
      {
        "number": 7,
        "question": "Differentiate between a constructor and a destructor.",
        "answer": "A constructor is used to initialize the object's state, while a destructor is used to clean up resources and perform tasks before an object is destroyed."
      },
      {
        "number": 8,
        "question": "What is function overloading?",
        "answer": "Function overloading is the ability to define multiple functions in the same scope with the same name but different parameters. The compiler selects the appropriate function based on the number and types of arguments."
      },
      {
        "number": 9,
        "question": "Explain the 'this' pointer in C++.",
        "answer": "The 'this' pointer is a pointer that points to the current object. It is used to differentiate between the object's data members and local variables with the same names in a class."
      },
      {
        "number": 10,
        "question": "What is a destructor?",
        "answer": "A destructor is a special member function in a class that is called when an object goes out of scope or is explicitly deleted. It is used to release resources and perform cleanup tasks."
      },
      {
        "number": 11,
        "question": "What is the difference between public, private, and protected access specifiers?",
        "answer": "Public members are accessible from outside the class, private members are only accessible within the class, and protected members are accessible within the class and its derived classes."
      },
      {
        "number": 12,
        "question": "What is a friend function in C++?",
        "answer": "A friend function is a function that is not a member of a class but is allowed to access its private and protected members. It is declared using the 'friend' keyword."
      },
      {
        "number": 13,
        "question": "Explain multiple inheritance.",
        "answer": "Multiple inheritance is a feature in C++ where a class can inherit properties and behaviors from more than one base class. It introduces complexities in resolving function and data member conflicts."
      },
      {
        "number": 14,
        "question": "What is a pure virtual function?",
        "answer": "A pure virtual function is a virtual function that is declared in a base class but has no implementation. It is meant to be overridden by derived classes, and a class containing a pure virtual function is called an abstract class."
      },
      {
        "number": 15,
        "question": "What is dynamic polymorphism?",
        "answer": "Dynamic polymorphism allows a program to decide which function to call at runtime. It is achieved through virtual functions and is also known as late binding or runtime polymorphism."
      },
      {
        "number": 16,
        "question": "What is operator overloading?",
        "answer": "Operator overloading is the ability to define new meanings for existing operators when used with user-defined types. It allows classes to define their behavior for standard operators."
      },
      {
        "number": 17,
        "question": "Explain the concept of a copy constructor.",
        "answer": "A copy constructor is a special constructor that creates a new object as a copy of an existing object. It is used when an object is passed by value, returned by value, or explicitly copied."
      },
      {
        "number": 18,
        "question": "What is the purpose of the 'const' keyword in member functions?",
        "answer": "The 'const' keyword in a member function declaration indicates that the function does not modify the object's data members. It is used to enforce read-only access to the object."
      },
      {
        "number": 19,
        "question": "What is the 'new' operator in C++?",
        "answer": "The 'new' operator is used to dynamically allocate memory for an object or an array of objects on the heap. It returns a pointer to the allocated memory."
      },
      {
        "number": 20,
        "question": "Explain the 'delete' operator in C++.",
        "answer": "The 'delete' operator is used to deallocate memory that was previously allocated using the 'new' operator. It releases the memory on the heap and should be used to prevent memory leaks."
      },
      {
        "number": 21,
        "question": "What is a template in C++?",
        "answer": "A template is a feature in C++ that allows the creation of generic classes and functions. It enables writing code that works with any data type."
      },
      {
        "number": 22,
        "question": "What is the difference between shallow copy and deep copy?",
        "answer": "A shallow copy copies the values of the data members, but if the members are pointers, it copies the memory addresses. A deep copy, on the other hand, creates a new copy of the pointed-to data, resulting in a fully independent copy."
      },
      {
        "number": 23,
        "question": "Explain the concept of static polymorphism.",
        "answer": "Static polymorphism, also known as compile-time polymorphism, is achieved through function overloading or operator overloading. The compiler determines the appropriate function or operator to be called at compile time."
      },
      {
        "number": 24,
        "question": "What is the purpose of the 'virtual' keyword in C++?",
        "answer": "The 'virtual' keyword is used to declare a function as virtual in a base class. It enables dynamic polymorphism by allowing derived classes to override the function."
      },
      {
        "number": 25,
        "question": "How is an object different from a class?",
        "answer": "A class is a blueprint or template for creating objects, while an object is an instance of a class. Objects have specific values for their data members, whereas a class defines the structure and behavior."
      }
    ]
  