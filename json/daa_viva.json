[
    {
      "sno": 1,
      "question": "Define algorithm and its characteristics.",
      "answer": "An algorithm is a step-by-step procedure or formula for solving a problem, and it must have input, output, and termination. Characteristics include correctness, efficiency, and clarity."
    },
    {
      "sno": 2,
      "question": "Explain the difference between time complexity and space complexity.",
      "answer": "Time complexity measures the amount of time an algorithm takes with respect to its input size, while space complexity measures the amount of memory space an algorithm uses."
    },
    {
      "sno": 3,
      "question": "What is Big-O notation? Provide an example.",
      "answer": "Big-O notation describes the upper bound on the growth rate of an algorithm. Example: O(n) represents linear time complexity, where the execution time grows linearly with the input size."
    },
    {
      "sno": 4,
      "question": "Discuss the importance of asymptotic analysis in algorithm design.",
      "answer": "Asymptotic analysis helps us understand how the performance of an algorithm behaves as the input size becomes large. It abstracts away constant factors and focuses on the growth rate, aiding in comparing algorithms independently of hardware and implementation details."
    },
    {
      "sno": 5,
      "question": "Explain the divide and conquer algorithm paradigm. Provide an example.",
      "answer": "Divide and conquer involves breaking a problem into subproblems, solving them recursively, and combining the solutions. Example: Merge Sort divides an array into two halves, sorts them, and then merges the sorted halves."
    },
    {
      "sno": 6,
      "question": "Define dynamic programming. How does it differ from greedy algorithms?",
      "answer": "Dynamic programming is a technique for solving problems by breaking them down into simpler overlapping subproblems. It differs from greedy algorithms as it considers future decisions to optimize the overall solution, whereas greedy algorithms make locally optimal choices at each step."
    },
    {
      "sno": 7,
      "question": "What is a hash function, and how is it used in algorithms?",
      "answer": "A hash function maps data of arbitrary size to a fixed-size value, usually a hash code. It is used in algorithms for data retrieval, storage, and ensuring data integrity through hash tables and hash maps."
    },
    {
      "sno": 8,
      "question": "Explain the concept of a spanning tree in graph theory.",
      "answer": "A spanning tree of a graph is a subgraph that includes all the vertices of the original graph with the minimum possible number of edges, ensuring connectivity without forming cycles."
    },
    {
      "sno": 9,
      "question": "What is the traveling salesman problem? Suggest an algorithm to solve it.",
      "answer": "The traveling salesman problem involves finding the shortest possible route that visits a set of cities and returns to the original city. An algorithm to solve it is the Held-Karp algorithm, which uses dynamic programming."
    },
    {
      "sno": 10,
      "question": "Discuss the concept of NP-completeness in algorithm complexity theory.",
      "answer": "NP-completeness is a class of problems where a solution can be verified quickly but finding a solution is believed to be inherently slow. Problems in this class are considered among the most challenging in computer science."
    },
    {
      "sno": 11,
      "question": "Explain the concept of a greedy algorithm. Provide an example.",
      "answer": "A greedy algorithm makes locally optimal choices at each step with the hope of finding a global optimum. Example: Dijkstra's algorithm for finding the shortest path in a graph by selecting the nearest neighbor at each step."
    },
    {
      "sno": 12,
      "question": "Define parallel algorithms. How do they differ from sequential algorithms?",
      "answer": "Parallel algorithms perform multiple computations simultaneously, utilizing multiple processing units. They differ from sequential algorithms, which execute one operation at a time, in terms of potential for increased speed and efficiency in parallel execution."
    },
    {
      "sno": 13,
      "question": "What is the Master Theorem? How is it used in algorithm analysis?",
      "answer": "The Master Theorem provides a framework for analyzing the time complexity of divide-and-conquer algorithms. It gives solutions to recurrence relations, helping determine the overall time complexity of such algorithms."
    },
    {
      "sno": 14,
      "question": "Discuss the concept of graph traversal. Provide examples of depth-first and breadth-first traversal.",
      "answer": "Graph traversal involves visiting all the vertices and edges of a graph in a systematic way. Depth-first traversal explores as far as possible along each branch before backtracking. Breadth-first traversal explores all neighbors of a vertex before moving on to the next level."
    },
    {
      "sno": 15,
      "question": "Explain the concept of a stable sorting algorithm. Provide an example.",
      "answer": "A stable sorting algorithm maintains the relative order of equal elements in the sorted output as they appeared in the input. Example: Merge Sort is a stable sorting algorithm."
    },
    {
      "sno": 16,
      "question": "What is the Floyd-Warshall algorithm used for? Explain its application.",
      "answer": "The Floyd-Warshall algorithm is used for all pairs shortest path problem in a weighted graph. It finds the shortest paths between all pairs of vertices in a graph, even if the graph contains negative weight edges."
    },
    {
      "sno": 17,
      "question": "Define the concept of amortized analysis in algorithm design.",
      "answer": "Amortized analysis provides an average cost for each operation in a sequence of operations, even when some operations may be more expensive than others. It helps in understanding the average performance of an algorithm over time."
    },
    {
      "sno": 18,
      "question": "What is the stable marriage problem? Provide an algorithm to solve it.",
      "answer": "The stable marriage problem involves finding a stable matching between two sets of elements, each with preferences for the other set. The Gale-Shapley algorithm provides a solution to this problem, ensuring that there are no blocking pairs."
    },
    {
      "sno": 19,
      "question": "Explain the concept of a directed acyclic graph (DAG). Provide an application of DAGs.",
      "answer": "A directed acyclic graph is a graph that has no cycles, meaning there is no sequence of vertices such that the first vertex is also the last. DAGs find applications in scheduling tasks with dependencies, such as in project management."
    },
    {
      "sno": 20,
      "question": "Discuss the concept of randomized algorithms. Provide an example.",
      "answer": "Randomized algorithms use random numbers to make decisions during computation. Example: Quicksort is a randomized sorting algorithm that selects a pivot element randomly, improving its average-case time complexity."
    },
    {
      "sno": 21,
      "question": "What is the difference between a simple and composite algorithm?",
      "answer": "A simple algorithm solves a problem directly, while a composite algorithm combines multiple simpler algorithms or components to solve a more complex problem. Composite algorithms often leverage modularization for better maintainability and reusability."
    },
    {
      "sno": 22,
      "question": "Define the concept of in-place algorithms. Provide an example.",
      "answer": "In-place algorithms modify the input data structure directly without requiring additional memory. Example: In-place sorting algorithms like Bubble Sort and Selection Sort rearrange elements within the array without using extra storage."
    },
    {
      "sno": 23,
      "question": "Explain the concept of a cache-oblivious algorithm.",
      "answer": "Cache-oblivious algorithms are designed to efficiently use cache memory without explicit knowledge of the cache parameters. They adapt to different levels of cache hierarchies, improving performance across various architectures."
    },
    {
      "sno": 24,
      "question": "Discuss the concept of backtracking in algorithm design. Provide an example.",
      "answer": "Backtracking is a technique to solve problems incrementally by trying out different possibilities and undoing choices when they lead to dead-ends. Example: The N-Queens problem, where the task is to place N queens on a chessboard such that no two queens threaten each other."
    },
    {
      "sno": 25,
      "question": "What is the purpose of the A* algorithm? Explain its application.",
      "answer": "The A* algorithm is used for pathfinding and graph traversal. It finds the shortest path from a starting node to a target node in a weighted graph by combining the benefits of both Dijkstra's algorithm and greedy best-first search."
    }
  ]

